-- FYNX HUB v2 with Player Features & Local Settings

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local SoundService = game:GetService("SoundService")
local HttpService = game:GetService("HttpService")

local player = Players.LocalPlayer
if not player then
    warn("FYNX HUB: script must run as a LocalScript (client).")
    return
end

-- helper: waitForChild with timeout
local function waitForChildTimeout(parent, name, timeout)
    local start = tick()
    while tick() - start < (timeout or 5) do
        local v = parent:FindFirstChild(name)
        if v then return v end
        task.wait(0.1)
    end
    return nil
end

-- remotes
local remotesFolder = waitForChildTimeout(ReplicatedStorage, "Remotes", 3)
local buySeedRemote = remotesFolder and remotesFolder:FindFirstChild("BuyItem") or nil
local buyGearRemote = remotesFolder and remotesFolder:FindFirstChild("BuyGear") or nil
if not remotesFolder then
    warn("FYNX HUB: ReplicatedStorage.Remotes not found (auto-buy disabled).")
elseif not buySeedRemote or not buyGearRemote then
    warn("FYNX HUB: BuyItem/BuyGear remote(s) not found (auto-buy disabled).")
end

-- DATA
local seeds = {"Cactus","Strawberry","Pumpkin","Sunflower","Dragonfruit","Eggplant","Watermelon","Grape","Cocotank","Carnivorous Plant","Mr Carrot","Tomatrio","Shroombino","Mango"}
local gears = {"Water Bucket","Frost Grenade","Banana Gun","Carrot Launcher","Frost Blower"}

local selectedSeeds, selectedGears = {}, {}
local autoBuy = false
local minimized = false
local buysPerItem = 5
local delayBetweenFires = 0.05

-- player controls
local DEFAULT_WALKSPEED = 16
local savedWalkSpeed = DEFAULT_WALKSPEED
local infiniteJumpEnabled = false

-- local settings storage
local function saveSettings()
    local data = {
        WalkSpeed = savedWalkSpeed,
        InfiniteJump = infiniteJumpEnabled
    }
    if writefile then
        pcall(function()
            writefile("FYNX_HUB_Settings.json", HttpService:JSONEncode(data))
        end)
    end
end

local function loadSettings()
    if isfile then
        if isfile("FYNX_HUB_Settings.json") then
            local success, data = pcall(function()
                return HttpService:JSONDecode(readfile("FYNX_HUB_Settings.json"))
            end)
            if success and data then
                savedWalkSpeed = data.WalkSpeed or DEFAULT_WALKSPEED
                infiniteJumpEnabled = data.InfiniteJump or false
            end
        end
    end
end

loadSettings()

-- click sound
local function playClickSound()
    local s = Instance.new("Sound")
    s.SoundId = "rbxassetid://12221967"
    s.Volume = 0.3
    s.PlayOnRemove = true
    s.Parent = SoundService
    s:Destroy()
end

-- GUI
local parentGui = player:FindFirstChild("PlayerGui") or ((gethui and gethui()) or game:GetService("CoreGui"))

local gui = Instance.new("ScreenGui")
gui.Name = "FYNX_HUB_GUI"
gui.ResetOnSpawn = false
gui.Parent = parentGui

-- Main frame
local frame = Instance.new("Frame", gui)
frame.Size = UDim2.new(0, 320, 0, 380)
frame.Position = UDim2.new(0.5, -160, 0.35, -100)
frame.BackgroundColor3 = Color3.fromRGB(25,25,40)
frame.BorderSizePixel = 0
frame.Active = true

-- Header
local header = Instance.new("Frame", frame)
header.Size = UDim2.new(1,0,0,40)
header.BackgroundColor3 = Color3.fromRGB(95,75,200)
header.BorderSizePixel = 0

local title = Instance.new("TextLabel", header)
title.Size = UDim2.new(1,-50,1,0)
title.Position = UDim2.new(0,10,0,0)
title.BackgroundTransparency = 1
title.Text = "FYNX HUB"
title.TextColor3 = Color3.fromRGB(255,255,255)
title.Font = Enum.Font.GothamBold
title.TextSize = 18
title.TextXAlignment = Enum.TextXAlignment.Left

local minBtn = Instance.new("TextButton", header)
minBtn.Size = UDim2.new(0,36,0,28)
minBtn.Position = UDim2.new(1,-46,0,6)
minBtn.BackgroundColor3 = Color3.fromRGB(120,100,255)
minBtn.Text = "-"
minBtn.Font = Enum.Font.GothamBold
minBtn.TextColor3 = Color3.fromRGB(255,255,255)
minBtn.BorderSizePixel = 0

-- Tab bar
local tabButtons = Instance.new("Frame", frame)
tabButtons.Size = UDim2.new(1,0,0,36)
tabButtons.Position = UDim2.new(0,0,0,42)
tabButtons.BackgroundColor3 = Color3.fromRGB(30,30,55)
tabButtons.BorderSizePixel = 0

local function createTabButton(text, xPos)
    local btn = Instance.new("TextButton", tabButtons)
    btn.Size = UDim2.new(0.5, -10, 1, -6)
    btn.Position = UDim2.new(xPos, 5, 0, 3)
    btn.BackgroundColor3 = Color3.fromRGB(80,70,160)
    btn.Text = text
    btn.Font = Enum.Font.GothamBold
    btn.TextSize = 14
    btn.TextColor3 = Color3.fromRGB(255,255,255)
    btn.BorderSizePixel = 0
    return btn
end

local homeBtn = createTabButton("🏠 Home", 0)
local playerBtn = createTabButton("👤 Player", 0.5)

-- tab frame
local tabFrame = Instance.new("Frame", frame)
tabFrame.Size = UDim2.new(1,-20,1,-120)
tabFrame.Position = UDim2.new(0,10,0,80)
tabFrame.BackgroundColor3 = Color3.fromRGB(30,30,55)
tabFrame.BorderSizePixel = 0

-- HOME scroll
local homeScroll = Instance.new("ScrollingFrame", tabFrame)
homeScroll.Size = UDim2.new(1,-8,1,0)
homeScroll.Position = UDim2.new(0,4,0,0)
homeScroll.CanvasSize = UDim2.new(0,0,0,0)
homeScroll.ScrollBarThickness = 6
homeScroll.BackgroundTransparency = 1

-- PLAYER tab
local playerTab = Instance.new("Frame", tabFrame)
playerTab.Size = UDim2.new(1,-8,1,0)
playerTab.Position = UDim2.new(0,4,0,0)
playerTab.BackgroundTransparency = 1
playerTab.Visible = false

-- WalkSpeed slider
local walkSpeedLabel = Instance.new("TextLabel", playerTab)
walkSpeedLabel.Size = UDim2.new(1,0,0,24)
walkSpeedLabel.Position = UDim2.new(0,0,0,10)
walkSpeedLabel.BackgroundTransparency = 1
walkSpeedLabel.Text = "WalkSpeed: "..savedWalkSpeed
walkSpeedLabel.Font = Enum.Font.GothamBold
walkSpeedLabel.TextSize = 16
walkSpeedLabel.TextColor3 = Color3.fromRGB(255,255,255)

local walkSpeedSlider = Instance.new("TextButton", playerTab)
walkSpeedSlider.Size = UDim2.new(1,-20,0,24)
walkSpeedSlider.Position = UDim2.new(0,10,0,40)
walkSpeedSlider.BackgroundColor3 = Color3.fromRGB(95,75,200)
walkSpeedSlider.Text = ""
walkSpeedSlider.BorderSizePixel = 0

walkSpeedSlider.MouseButton1Down:Connect(function()
    local mouse = player:GetMouse()
    local connection
    connection = mouse.Move:Connect(function()
        local relative = math.clamp(mouse.X - walkSpeedSlider.AbsolutePosition.X, 0, walkSpeedSlider.AbsoluteSize.X)
        local speed = math.floor(16 + (relative / walkSpeedSlider.AbsoluteSize.X) * (100 - 16))
        savedWalkSpeed = speed
        walkSpeedLabel.Text = "WalkSpeed: "..savedWalkSpeed
        if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
            player.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = savedWalkSpeed
        end
    end)
    local release
    release = UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            connection:Disconnect()
            release:Disconnect()
            saveSettings()
        end
    end)
end)

-- Infinite Jump toggle
local infJumpBtn = Instance.new("TextButton", playerTab)
infJumpBtn.Size = UDim2.new(1,-20,0,28)
infJumpBtn.Position = UDim2.new(0,10,0,80)
infJumpBtn.BackgroundColor3 = infiniteJumpEnabled and Color3.fromRGB(120,200,120) or Color3.fromRGB(200,80,80)
infJumpBtn.Text = infiniteJumpEnabled and "Infinite Jump: ON" or "Infinite Jump: OFF"
infJumpBtn.Font = Enum.Font.GothamBold
infJumpBtn.TextSize = 14
infJumpBtn.TextColor3 = Color3.fromRGB(255,255,255)
infJumpBtn.BorderSizePixel = 0
infJumpBtn.MouseButton1Click:Connect(function()
    infiniteJumpEnabled = not infiniteJumpEnabled
    infJumpBtn.BackgroundColor3 = infiniteJumpEnabled and Color3.fromRGB(120,200,120) or Color3.fromRGB(200,80,80)
    infJumpBtn.Text = infiniteJumpEnabled and "Infinite Jump: ON" or "Infinite Jump: OFF"
    saveSettings()
end)

-- Infinite jump logic
UserInputService.JumpRequest:Connect(function()
    if infiniteJumpEnabled and player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
        player.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
    end
end)

-- collapsible lists (seeds/gears) + rest of your GUI code here
-- ... (keep all existing collapsible list code, tab switching, auto-buy buttons, minimize/drag)

-- Optimized Auto-Buy: seeds delayed, gears instant
task.spawn(function()
    while task.wait(0.05) do
        if autoBuy then
            -- SEEDS with delay
            for seed,_ in pairs(selectedSeeds) do
                if buySeedRemote then
                    for i = 1, buysPerItem do
                        pcall(function()
                            buySeedRemote:FireServer(seed, true)
                        end)
                        task.wait(delayBetweenFires)
                    end
                end
            end

            -- GEARS instant
            for gear,_ in pairs(selectedGears) do
                if buyGearRemote then
                    for i = 1, buysPerItem do
                        pcall(function()
                            buyGearRemote:FireServer(unpack({gear,true}))
                        end)
                    end
                end
            end
        end
    end
end)

-- Draggable function (PC + mobile)
local function makeDraggable(obj, dragHandle)
    local dragging, dragStart, startPos
    local function update(input)
        local delta = input.Position - dragStart
        obj.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X,
            startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    dragHandle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = obj.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then dragging = false end
            end)
        end
    end)
    dragHandle.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            update(input)
        end
    end)
end

makeDraggable(frame, header)

-- apply walk speed on spawn
if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
    player.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = savedWalkSpeed
end

recalcPositions()
print("FYNX HUB loaded - Optimized Fast Auto Buy (Seeds delayed, Gears instant) + Player Features Enabled")
